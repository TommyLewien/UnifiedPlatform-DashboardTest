// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: VersionDTO.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Discom.UP.DataContracts.Maintenance.VersionDTO {

  /// <summary>Holder for reflection information generated from VersionDTO.proto</summary>
  public static partial class VersionDTOReflection {

    #region Descriptor
    /// <summary>File descriptor for VersionDTO.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static VersionDTOReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBWZXJzaW9uRFRPLnByb3RvEi5EaXNjb20uVVAuRGF0YUNvbnRyYWN0cy5N",
            "YWludGVuYW5jZS5WZXJzaW9uRFRPIjkKClZlcnNpb25EVE8SDQoFbWFqb3IY",
            "ASACKAUSDQoFbWlub3IYAiACKAUSDQoFcGF0Y2gYAyACKAVCMaoCLkRpc2Nv",
            "bS5VUC5EYXRhQ29udHJhY3RzLk1haW50ZW5hbmNlLlZlcnNpb25EVE8="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Discom.UP.DataContracts.Maintenance.VersionDTO.VersionDTO), global::Discom.UP.DataContracts.Maintenance.VersionDTO.VersionDTO.Parser, new[]{ "Major", "Minor", "Patch" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class VersionDTO : pb::IMessage<VersionDTO>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<VersionDTO> _parser = new pb::MessageParser<VersionDTO>(() => new VersionDTO());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<VersionDTO> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Discom.UP.DataContracts.Maintenance.VersionDTO.VersionDTOReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public VersionDTO() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public VersionDTO(VersionDTO other) : this() {
      _hasBits0 = other._hasBits0;
      major_ = other.major_;
      minor_ = other.minor_;
      patch_ = other.patch_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public VersionDTO Clone() {
      return new VersionDTO(this);
    }

    /// <summary>Field number for the "major" field.</summary>
    public const int MajorFieldNumber = 1;
    private readonly static int MajorDefaultValue = 0;

    private int major_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Major {
      get { if ((_hasBits0 & 1) != 0) { return major_; } else { return MajorDefaultValue; } }
      set {
        _hasBits0 |= 1;
        major_ = value;
      }
    }
    /// <summary>Gets whether the "major" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMajor {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "major" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMajor() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "minor" field.</summary>
    public const int MinorFieldNumber = 2;
    private readonly static int MinorDefaultValue = 0;

    private int minor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Minor {
      get { if ((_hasBits0 & 2) != 0) { return minor_; } else { return MinorDefaultValue; } }
      set {
        _hasBits0 |= 2;
        minor_ = value;
      }
    }
    /// <summary>Gets whether the "minor" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMinor {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "minor" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMinor() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "patch" field.</summary>
    public const int PatchFieldNumber = 3;
    private readonly static int PatchDefaultValue = 0;

    private int patch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Patch {
      get { if ((_hasBits0 & 4) != 0) { return patch_; } else { return PatchDefaultValue; } }
      set {
        _hasBits0 |= 4;
        patch_ = value;
      }
    }
    /// <summary>Gets whether the "patch" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPatch {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "patch" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPatch() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as VersionDTO);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(VersionDTO other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Major != other.Major) return false;
      if (Minor != other.Minor) return false;
      if (Patch != other.Patch) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMajor) hash ^= Major.GetHashCode();
      if (HasMinor) hash ^= Minor.GetHashCode();
      if (HasPatch) hash ^= Patch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMajor) {
        output.WriteRawTag(8);
        output.WriteInt32(Major);
      }
      if (HasMinor) {
        output.WriteRawTag(16);
        output.WriteInt32(Minor);
      }
      if (HasPatch) {
        output.WriteRawTag(24);
        output.WriteInt32(Patch);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMajor) {
        output.WriteRawTag(8);
        output.WriteInt32(Major);
      }
      if (HasMinor) {
        output.WriteRawTag(16);
        output.WriteInt32(Minor);
      }
      if (HasPatch) {
        output.WriteRawTag(24);
        output.WriteInt32(Patch);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasMajor) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Major);
      }
      if (HasMinor) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Minor);
      }
      if (HasPatch) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Patch);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(VersionDTO other) {
      if (other == null) {
        return;
      }
      if (other.HasMajor) {
        Major = other.Major;
      }
      if (other.HasMinor) {
        Minor = other.Minor;
      }
      if (other.HasPatch) {
        Patch = other.Patch;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Major = input.ReadInt32();
            break;
          }
          case 16: {
            Minor = input.ReadInt32();
            break;
          }
          case 24: {
            Patch = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Major = input.ReadInt32();
            break;
          }
          case 16: {
            Minor = input.ReadInt32();
            break;
          }
          case 24: {
            Patch = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
